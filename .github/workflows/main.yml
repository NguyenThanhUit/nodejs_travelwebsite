name: devopsProject

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: devopsproject
  ECR_SERVICE: devopsproject-svc
  ECR_CLUSTER: devopsproject-app
  ECR_TASK_DEFINITION: awsfile/taskdif.json
  CONTAINER_NAME: devopsproject

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Set Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
  

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: |
          echo "Starting SonarQube scan..."
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=$GITHUB_WORKSPACE
          echo "SonarQube scan completed"

  BUILD:
    runs-on: ubuntu-latest
    needs: Testing
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: devopsproject
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./

  DEPLOY:
    runs-on: ubuntu-latest
    needs: BUILD
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

  
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{env.ECR_TASK_DEFINITION}}
          container-name: ${{env.CONTAINER_NAME}}
          image: ${{secrets.REGISTRY}}/${{env.ECR_REPOSITORY}}:${{github.run_number}}
  
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{env.ECR_SERVICE}}
          cluster: ${{env.ECR_CLUSTER}}
          wait-for-service-stability: true

     
